{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["rows","GoogleSpreadsheet","require","creds","doc","App","state","count","display","data","componentDidMount","a","useServiceAccountAuth","client_email","private_key","loadInfo","sheet","sheetsByIndex","getRows","setState","clickedButton","Email","save","console","log","onClick","this","map","item","key","ID","Name","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"slFAaIA,E,wGARIC,G,OAAsBC,EAAQ,KAA9BD,mBACFE,EAAQD,EAAQ,KAGhBE,EAAM,IAAIH,EACd,gDAoDaI,E,4MA9CbC,MAAQ,CACNC,MAAO,EACPC,SAAS,EACTC,KAAM,I,EAGRC,kB,sBAAoB,4BAAAC,EAAA,sEACZP,EAAIQ,sBAAsB,CAC9BC,aAAcV,EAAMU,aACpBC,YAAaX,EAAMW,cAHH,uBAMZV,EAAIW,WANQ,cAOZC,EAAQZ,EAAIa,cAAc,GAPd,SAQLD,EAAME,UARD,OAQlBlB,EARkB,OAUlB,EAAKmB,SAAS,CAAEV,KAAMT,IAVJ,2C,EAapBoB,c,sBAAgB,sBAAAT,EAAA,6DAMdX,EAAK,GAAGqB,MAAQ,eANF,SAORrB,EAAK,GAAGsB,OAPA,OAQd,EAAKH,SAAS,CAAEV,KAAMT,IAEtBuB,QAAQC,IAAI,EAAKlB,MAAMG,MAVT,2C,uDAcd,OACE,6BACE,4BAAQgB,QAASC,KAAKN,eAAtB,yBACCM,KAAKpB,MAAMG,KAAKkB,KAAI,SAAAC,GAAI,OACvB,wBAAIC,IAAKD,EAAKE,IACXF,EAAKE,GADR,KACcF,EAAKG,KADnB,KAC2BH,EAAKP,e,GAvCxBW,aCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,a","file":"static/js/main.9eb9043b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport products from \"./vschoolProducts.js\";\nimport Product from \"./Product\";\nimport { Component } from \"react\";\nconst { GoogleSpreadsheet } = require(\"google-spreadsheet\");\nconst creds = require(\"./client_secret.json\");\n\n// spreadsheet key is the long id in the sheets URL\nconst doc = new GoogleSpreadsheet(\n  \"11tH_WVs1vmYYrm0EbE8Yx6FUqyBjl-nxF2e6Ag7Vtgo\"\n);\n\nlet rows;\n\nclass App extends Component {\n  state = {\n    count: 0,\n    display: false,\n    data: []\n  };\n\n  componentDidMount = async () => {\n    await doc.useServiceAccountAuth({\n      client_email: creds.client_email,\n      private_key: creds.private_key\n    });\n\n    await doc.loadInfo();\n    const sheet = doc.sheetsByIndex[0];\n    rows = await sheet.getRows();\n\n    this.setState({ data: rows });\n  };\n\n  clickedButton = async () => {\n    // this.setState(prevStasyncate => {\n    //   return {\n    //     count: prevState.count + 1\n    //   };\n    // });\n    rows[1].Email = \"newemail@new\";\n    await rows[1].save();\n    this.setState({ data: rows });\n\n    console.log(this.state.data);\n  };\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.clickedButton}>Click to change email</button>\n        {this.state.data.map(item => (\n          <ul key={item.ID}>\n            {item.ID}, {item.Name}, {item.Email}\n          </ul>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}